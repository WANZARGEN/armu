<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bitcamp.java93.dao.MusicianDao">

  <resultMap type="musician" id="musicianMap">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="phone" property="phone" />
    <result column="pwd" property="password" />
    <result column="email" property="email" />
    <result column="age" property="age" />
    <result column="team" property="isTeam" />
    <result column="hpg" property="homepage" />
    <result column="intro" property="intro" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
    <result column="score" property="score" />
    <result column="rev" property="review" />
    <result column="fav" property="isFavorite"/>
    <result column="sido" property="sido"/>
    <collection property="photoList" ofType="string">
      <result column="path"/>
    </collection>
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="themeList" ofType="string"> 
       <result column="theme"/> 
    </collection>
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>
  
  <resultMap type="musician" id="musicianMap2">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="phone" property="phone" />
    <result column="pwd" property="password" />
    <result column="email" property="email" />
    <result column="age" property="age" />
    <result column="team" property="isTeam" />
    <result column="hpg" property="homepage" />
    <result column="intro" property="intro" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
    <result column="score" property="score" />
    <result column="rev" property="review" />
    <result column="fav" property="isFavorite"/>
    <result column="sido" property="sido"/>
    <result column="indexNo" property="indexNo"/>
    <collection property="photoList" ofType="string">
      <result column="path"/>
    </collection>
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="themeList" ofType="string"> 
       <result column="theme"/> 
    </collection>
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>
  
  <resultMap type="musician" id="musicianFavorMap">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="path" property="photo" />
    <result column="count" property="count" />
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>
  
   <resultMap type="musician" id="musicianInfoMap">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="age" property="age" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
    <result column="fav" property="fav" />
    <result column="team" property="isTeam" />
  </resultMap>
  
  <resultMap type="musician" id="musicianInfoReviewMap">
    <id column="count" property="count" />
    <result column="score" property="score" />
    <result column="rev" property="review" />
    <result column="name" property="name" />
    <result column="path" property="photo" />
    <result column="eventTitle" property="eventTitle" />
    <result column="eventDate" property="eventDate" />
  </resultMap>
  
  <resultMap type="musician" id="musicianInfoIntroduceMap">
    <result column="team" property="isTeam" />
    <result column="hpg" property="homepage" />
    <result column="intro" property="intro" />
    <result column="sido" property="sido"/>
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="themeList" ofType="string"> 
       <result column="theme"/> 
    </collection>
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>
  
  <resultMap type="musician" id="musicianInfoPortfolioMap">
    <result column="specDate" property="specDate" />
    <result column="specDscp" property="specDscp" />
     <collection property="list" ofType="java.util.Map">
       <association property="fileMap" javaType="java.util.Map"> 
      <result property="key" column="fileType"/> 
       <result property="value" column="filePath"></result>
      </association>
    </collection>
  </resultMap>
  
  
  <sql id="selectBasic">
  
  </sql>
  
  <sql id="selectAll">
  select m.mno, m.name, mu.nick, m.phone, m.email, mu.age, mu.team, mu.hpg, m.path, mu.gender, 
  mj.name as major, g.name as genre, t.name as theme, mtc.score, mtc.rev, if(fm.fav is not null, 1, 0) as fav, 
  lm.muno, l.name as location, lt.name as sido
  from musi mu inner join memb m on mu.muno=m.mno
  left outer join mjr_musi mjm on mu.muno=mjm.muno left outer join mjr mj on mjm.mjrno=mj.mjrno
  left outer join gnr_musi gm on mu.muno=gm.muno left outer join gnr g on gm.gnrno=g.gnrno
  left outer join thm_musi tm on mu.muno=tm.muno left outer join thm t on tm.thmno=t.thmno
  left outer join mtc on mtc.muno=mu.muno
  left outer join (
  select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi
  where mno = #{no}
  group by muno) fm on fm.muno=mu.muno
  left outer join loc_musi lm on lm.muno=m.mno
  left outer join loc l on lm.locno= l.locno
  left outer join loc_type lt on l.loctno = lt.loctno
  </sql>
  
  <select id="selectMusi" resultMap="musicianInfoMap" parameterType="map">
  select m.mno, m.name, mu.nick, mu.age, m.path, mu.team, mu.gender, if(fm.fav is not null, 1, 0) as fav
  from musi mu inner join memb m on mu.muno=m.mno
  left outer join (select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi
  where mno=#{myNo}
  group by muno) fm on fm.muno=mu.muno
  where mu.muno=#{muNo}
  </select> <!-- 승민 -->
  
  <select id="myMusiInfo" resultMap="musicianInfoMap" parameterType="map">
  select m.mno, m.name, mu.nick, mu.age, m.path, mu.team, mu.gender
  from musi mu inner join memb m on mu.muno=m.mno
  where mu.muno= #{myNo}
  </select> <!-- 승민 -->
  
  <select id="selectMusiReview" resultMap="musicianInfoReviewMap" parameterType="int">
  select ctr.count, mtc.rev, mtc.score, even.title as eventTitle, DATE_FORMAT(even.date, '%Y-%m-%d') as eventDate, m.name , m.path
  from musi as mu left outer join mtc on mtc.muno=mu.muno
  left outer join (select muno, count(*) as count 
  from mtc 
  group by muno) ctr on ctr.muno=mtc.muno
  left outer join evn even on mtc.eno = even.eno
  left outer join memb m on even.mno = m.mno
  where mtc.muno = #{no}
  </select> <!-- 승민 -->
  
  
  <select id="selectMusiIntroduce" resultMap="musicianInfoIntroduceMap" parameterType="int">
  select if(mu.hpg is not null, mu.hpg, 0) as hpg, mu.intro, mj.name as major, g.name as genre, l.name as location, lt.name as sido, t.name as theme
  from musi mu left outer join mjr_musi mjm on mu.muno=mjm.muno 
  left outer join mjr mj on mjm.mjrno=mj.mjrno
  left outer join gnr_musi gm on mu.muno=gm.muno 
  left outer join gnr g on gm.gnrno=g.gnrno
  left outer join thm_musi tm on mu.muno=tm.muno 
  left outer join thm t on tm.thmno=t.thmno
  left outer join loc_musi lm on mu.muno=lm.muno 
  left outer join loc l on lm.locno=l.locno
  left outer join loc_type lt on l.loctno = lt.loctno
  where mu.muno = #{no}
  </select> <!-- 승민 -->
  
  <select id="selectMusiPortfolio" resultMap="musicianInfoPortfolioMap" parameterType="int">
  select sp.spdt as specDate, sp.dscp as specDscp, spp.isimg as fileType, spp.path as filePath 
  from musi mu left outer join spec sp on mu.muno = sp.muno
  inner join spec_path spp on sp.spno = spp.spno
  where mu.muno = #{no}
  </select> <!-- 승민 -->

  <select id="selectRecommandList" resultMap="musicianMap" parameterType="int">
  select mum.mno, mum.name, mu.nick, mu.team, mum.path, fm.fav, if(mtc.score is not null, mtc.score, 0) as score,
  tag.mjrno, tag.thmno, tag.gnrno, tag.major, tag.theme, tag.genre, null as location
  from musi mu
  inner join memb mum on mu.muno=mum.mno
  left outer join mjr_musi mjm on mu.muno=mjm.muno
  left outer join thm_musi tm on mu.muno=tm.muno
  left outer join gnr_musi gm on mu.muno=gm.muno
  inner join (
    select e.eno, e.title, m.name as writer,
    mjr.mjrno, mjr.name as major, thm.thmno, thm.name as theme, gnr.gnrno, gnr.name as genre
    from (
      select * from evn where date >= curdate() order by date asc
    ) e inner join memb m on m.mno=e.mno
    left outer join mjr_evn on e.eno=mjr_evn.eno inner join mjr on mjr.mjrno=mjr_evn.mjrno
    left outer join thm_evn on e.eno=thm_evn.eno inner join thm on thm.thmno=thm_evn.thmno
    left outer join gnr_evn on e.eno=gnr_evn.eno inner join gnr on gnr.gnrno=gnr_evn.gnrno
    where e.mno=#{no}
  ) tag on (tag.mjrno=mjm.mjrno and tag.thmno=tm.thmno) or
           (tag.gnrno=gm.gnrno and tag.thmno=tm.thmno) or
           (tag.gnrno=gm.gnrno and tag.mjrno=mjm.mjrno)
  left outer join (
    select count(if(mno is not null, 1, 0)) as fav, mno, muno
    from fav_musi
    where mno = #{no}
    group by muno
  ) fm on fm.muno=mu.muno
  left outer join (
    select avg(score) as score, muno
    from mtc
    group by muno
  ) mtc on mtc.muno=mu.muno
    order by mum.name asc
  </select> <!-- 완진 -->
  
  <select id="selectBestReviewList" resultMap="musicianMap">
    select mt.mtcno, mt.eno, mt.muno as mno, mt.score, mt.rev,
		mu.nick, mum.path, mj.name as major, g.name as genre, t.name as theme, null as location
		from musi mu inner join (
		  select m.mtcno, m.eno, m.muno, m.score, m.rev
		  from (
		    select max(score) as score, muno,
		    substring_index(group_concat(mtcno order by score desc), ',', 1) as mtcno
		    from mtc
		    group by muno
		    order by score desc
		  ) dmtc inner join mtc m on dmtc.mtcno=m.mtcno
		  order by m.score desc
		  limit 3
		) mt on mt.muno=mu.muno
		inner join memb mum on mu.muno=mum.mno
		left outer join mjr_musi mjm on mu.muno=mjm.muno
		left outer join gnr_musi gm on mu.muno=gm.muno
		left outer join thm_musi tm on mu.muno=tm.muno
		inner join mjr mj on mjm.mjrno=mj.mjrno
		inner join gnr g on gm.gnrno=g.gnrno
		inner join thm t on tm.thmno=t.thmno
  </select>
  
  <select id="selectPopularList" resultMap="musicianMap">
  select mum.mno, mu.nick, mum.path, sc.score, mj.name as major, g.name as genre, t.name as theme, null as location
	from musi mu
	inner join memb mum on mu.muno=mum.mno
	inner join (
	  select count(if(muno is not null, 1, 0)) as popu, muno
	  from fav_musi
	  group by muno
	  order by popu desc
	  limit 4
	) pomu on pomu.muno = mu.muno
	left outer join (
	  select avg(score) as score, muno
	  from mtc
	  group by muno
	) sc on sc.muno=mu.muno
	left outer join mjr_musi mjm on mu.muno=mjm.muno
	left outer join gnr_musi gm on mu.muno=gm.muno
	left outer join thm_musi tm on mu.muno=tm.muno
	inner join mjr mj on mjm.mjrno=mj.mjrno
	inner join gnr g on gm.gnrno=g.gnrno
	inner join thm t on tm.thmno=t.thmno
	order by mu.muno desc
  </select>

  <select id="selectFavorList" resultMap="musicianFavorMap" parameterType="int">
		select ctr.count, m.mno, m.name, m.path, gnr.name as genre, mjr.name as major, loct.name as location
		from fav_musi fmu
		left outer join memb gm on fmu.mno=gm.mno
		left outer join musi mu on fmu.muno = mu.muno
		left outer join (select mno, count(*) as count 
    from fav_musi 
    group by mno) ctr on ctr.mno=fmu.mno
		left outer join memb m on m.mno = mu.muno
		left outer join gnr_musi gnmu on mu.muno = gnmu.muno
		left outer join gnr gnr on gnmu.gnrno = gnr.gnrno
		left outer join mjr_musi mjmu on mu.muno = mjmu.muno
		left outer join mjr mjr on mjmu.mjrno = mjr.mjrno
		left outer join loc_musi lomu on mu.muno = lomu.muno
		left outer join loc loc on lomu.locno = loc.locno
		left outer join loc_type loct on loc.loctno = loct.loctno
		where gm.mno = #{no}
  </select> <!-- 승민 -->
  
  <select id="favorMusiRemove" parameterType="map">
  delete from fav_musi where muno = #{muNo} and mno = #{myNo};
  </select> <!-- 승민 -->
  
  <select id="favorMusiAdd" parameterType="map">
  insert into fav_musi (muno, mno) values (#{muNo}, #{myNo})
  </select> <!-- 승민 -->

  <select id="surfList" resultMap="musicianMap">
  <include refid="selectAll" />
  </select> <!-- 승민 -->
  
  <select id="selectSurfListFilter" resultMap="musicianMap" parameterType="map">
  <include refid="selectAll" />
  <if test ='gender =="G"'>
  where mu.age <![CDATA[ > ]]>  #{minAge} and 
  mu.age  <![CDATA[ < ]]> #{maxAge}
  </if>
  <if test ='gender !="G"'>
  where mu.gender = #{gender} and 
  mu.age <![CDATA[ > ]]> #{minAge} and 
  mu.age <![CDATA[ < ]]> #{maxAge}
  </if>
  </select> <!-- 승민 -->
  
  <select id="musicianSearch" resultMap="musicianMap2" parameterType="map">
	select m.mno, m.name, mu.nick, m.phone, m.email, mu.age, mu.team,
	mu.hpg, m.path, mu.gender,
	mj.name as major, g.name as genre, t.name as theme, mtc.score, mtc.rev,
	if(fm.fav is not null, 1, 0) as fav,
	lm.muno, l.name as location, lt.name as sido , mjrt.name, gnrt.name
	from musi mu inner join memb m on mu.muno=m.mno
	left outer join mjr_musi mjm on mu.muno=mjm.muno
	left outer join mjr mj on mj.mjrno=mjm.mjrno
	left outer join gnr_musi gm on mu.muno=gm.muno left outer join gnr g on
	gm.gnrno=g.gnrno
	left outer join thm_musi tm on mu.muno=tm.muno left outer join thm t on
	tm.thmno=t.thmno
	left outer join mtc on mtc.muno=mu.muno
	left outer join (
	select count(if(mno is not null, 1, 0)) as fav, mno, muno
	from fav_musi
	where mno = 1
	group by muno) fm on fm.muno=mu.muno
	left outer join loc_musi lm on lm.muno=m.mno
	left outer join loc l on lm.locno= l.locno
	left outer join loc_type lt on l.loctno = lt.loctno
	left outer join mjr_type mjrt on mj.mjrtno=mjrt.mjrtno
	left outer join gnr_type gnrt on g.gnrtno=gnrt.gnrtno
	<choose>
	<when test="location == '전체'">
		where lt.loctno=#{indexNo}
		<choose>
      <when test="major == '전체'">
    AND mj.mjrtno=#{indexNo}
  </when>
  <when test="genre== '전체'">
    AND g.gnrtno=#{indexNo}
  </when>
  <otherwise>
  
  </otherwise>
		</choose>
	</when>
	<when test="major == '전체'">
    where mj.mjrtno=#{indexNo}
    <choose>
      <when test="location== '전체'">
    AND lt.loctno=#{indexNo}
  </when>
  <when test="genre== '전체'">
    AND g.gnrtno=#{indexNo}
  </when>
  <otherwise>
  
  </otherwise>
    </choose>
  </when>
  <when test="genre== '전체'">
    where g.gnrtno=#{indexNo}
    <choose>
      <when test="major == '전체'">
    AND mj.mjrtno=#{indexNo}
  </when>
  <when test="location== '전체'">
    AND lt.loctno=#{indexNo}
  </when>
  <otherwise>
  
  </otherwise>
    </choose>
  </when>
	<when test='location == "선택안됨"'>
		<choose>
			<when test="major == '선택안됨'">
				where g.name= #{genre}
			</when>
			<when test="genre == '선택안됨'">
				where mj.name= #{major}
			</when>
			<otherwise>
				where g.name= #{genre} AND
				mj.name= #{major}
			</otherwise>
		</choose>
	</when>

	<when test='major == "선택안됨"'>
		<choose>
			<when test="location == '선택안됨'">
				where g.name= #{genre}
			</when>
			<when test="genre == '선택안됨'">
				where l.name= #{location}
			</when>
			<otherwise>
				where l.name= #{location} AND
				g.name= #{genre}
			</otherwise>
		</choose>
	</when>

	<when test='genre == "선택안됨"'>
		<choose>
			<when test="location == '선택안됨'">
				where mj.name= #{major}
			</when>
			<when test="major == '선택안됨'">
				where l.name= #{location}
			</when>
			<otherwise>
				where l.name= #{location} AND
				mj.name= #{major}
			</otherwise>
		</choose>
	</when>

	<otherwise>
		where l.name=#{location} AND
		mj.name = #{major} AND
		g.name = #{genre}
	</otherwise>
</choose>
  </select>
   
  <insert id="insert" parameterType="musician" 
          useGeneratedKeys="true" keyColumn="mno" keyProperty="no">
    insert into musi(muno, team, age, hpg, intro, gender, nick) 
    values(#{no},#{isTeam},#{age},#{homepage},#{intro},#{gender},#{nickName})
  </insert>
   
     <update id="updateNick" parameterType="musician">
    update musi set 
      nick=#{nickName}
    where muno=#{no}
  </update>
  
  <select id="selectMusiNo" parameterType="int" resultMap="musicianInfoMap">
    SELECT * FROM musi 
    WHERE muno = #{no}
  </select>
  
</mapper>












