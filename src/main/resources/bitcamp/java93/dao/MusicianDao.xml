<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bitcamp.java93.dao.MusicianDao">

  <resultMap type="musician" id="musicianMap">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="phone" property="phone" />
    <result column="pwd" property="password" />
    <result column="email" property="email" />
    <result column="age" property="age" />
    <result column="team" property="isTeam" />
    <result column="hpg" property="homepage" />
    <result column="intro" property="intro" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
    <result column="score" property="score" />
    <result column="rev" property="review" />
    <result column="fav" property="isFavorite"/>
    <result column="sido" property="sido"/>
    <collection property="photoList" ofType="string">
      <result column="path"/>
    </collection>
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="themeList" ofType="string"> 
       <result column="theme"/> 
    </collection>
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>
  
  <resultMap type="musician" id="musicianMap2">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="phone" property="phone" />
    <result column="pwd" property="password" />
    <result column="email" property="email" />
    <result column="age" property="age" />
    <result column="team" property="isTeam" />
    <result column="hpg" property="homepage" />
    <result column="intro" property="intro" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
    <result column="score" property="score" />
    <result column="rev" property="review" />
    <result column="fav" property="isFavorite"/>
    <result column="sido" property="sido"/>
    <collection property="photoList" ofType="string">
      <result column="path"/>
    </collection>
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="themeList" ofType="string"> 
       <result column="theme"/> 
    </collection>
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>
  
  <resultMap type="musician" id="musicianAppyMap">
   <id column="eno" property="eno" />
   <collection property="muNoList" ofType="string"> 
     <result column="muNoList"/> 
   </collection>
  </resultMap>
  
  <resultMap type="musician" id="musicianFavorMap">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="path" property="photo" />
    <result column="count" property="count" />
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>
  
   <resultMap type="musician" id="musicianInfoMap">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="age" property="age" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
    <result column="fav" property="fav" />
    <result column="team" property="isTeam" />
  </resultMap>
  
  <resultMap type="musician" id="musicianMatchMap">
    <id column="muno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="score" property="score" />
    <result column="path" property="photo" />
    <result column="fav" property="isFavorite" />
    <result column="rev" property="rev" />
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="themeList" ofType="string"> 
       <result column="theme"/> 
    </collection>
  </resultMap>
  
  <sql id="selectAll">
  select m.mno, m.name, mu.nick, m.phone, m.email, mu.age, mu.team, mu.hpg, m.path, mu.gender, 
  mj.name as major, g.name as genre, t.name as theme, mtc.score, mtc.rev, if(fm.fav is not null, 1, 0) as fav, 
  lm.muno, l.name as location, lt.name as sido
  from musi mu inner join memb m on mu.muno=m.mno
  left outer join mjr_musi mjm on mu.muno=mjm.muno left outer join mjr mj on mjm.mjrno=mj.mjrno
  left outer join gnr_musi gm on mu.muno=gm.muno left outer join gnr g on gm.gnrno=g.gnrno
  left outer join thm_musi tm on mu.muno=tm.muno left outer join thm t on tm.thmno=t.thmno
  left outer join mtc on mtc.muno=mu.muno
  left outer join (
  select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi
  where mno = #{no}
  group by muno) fm on fm.muno=mu.muno
  left outer join loc_musi lm on lm.muno=m.mno
  left outer join loc l on lm.locno= l.locno
  left outer join loc_type lt on l.loctno = lt.loctno
  </sql>
  
  <sql id="filter">
   <if test='gender =="G"'>
     and mu.age <![CDATA[ > ]]>
     #{minAge} and
     mu.age  <![CDATA[ < ]]>
     #{maxAge}
   </if>
   <if test='gender !="G"'>
     and mu.gender = #{gender} and
     mu.age <![CDATA[ > ]]>
     #{minAge} and
     mu.age <![CDATA[ < ]]>
     #{maxAge}
   </if>
 </sql>
 
  
  <select id="selectRecommandList" resultMap="musicianMap" parameterType="int">
  select mum.mno, mum.name, mu.nick, mu.team, mum.path, fm.fav, if(mtc.score is not null, mtc.score, 0) as score,
  tag.mjrno, tag.thmno, tag.gnrno, tag.major, tag.theme, tag.genre, null as location
  from musi mu
  inner join memb mum on mu.muno=mum.mno
  left outer join mjr_musi mjm on mu.muno=mjm.muno
  left outer join thm_musi tm on mu.muno=tm.muno
  left outer join gnr_musi gm on mu.muno=gm.muno
  inner join (
    select e.eno, e.title, m.name as writer,
    mjr.mjrno, mjr.name as major, thm.thmno, thm.name as theme, gnr.gnrno, gnr.name as genre
    from (
      select * from evn where date >= curdate() and active='Y' order by date asc
    ) e inner join memb m on m.mno=e.mno
    left outer join mjr_evn on e.eno=mjr_evn.eno inner join mjr on mjr.mjrno=mjr_evn.mjrno
    left outer join thm_evn on e.eno=thm_evn.eno inner join thm on thm.thmno=thm_evn.thmno
    left outer join gnr_evn on e.eno=gnr_evn.eno inner join gnr on gnr.gnrno=gnr_evn.gnrno
    where e.mno=#{no}
  ) tag on (tag.mjrno=mjm.mjrno and tag.thmno=tm.thmno) or
           (tag.gnrno=gm.gnrno and tag.thmno=tm.thmno) or
           (tag.gnrno=gm.gnrno and tag.mjrno=mjm.mjrno)
  left outer join (
    select count(if(mno is not null, 1, 0)) as fav, mno, muno
    from fav_musi
    where mno = #{no}
    group by muno
  ) fm on fm.muno=mu.muno
  left outer join (
    select avg(score) as score, muno
    from mtc
    group by muno
  ) mtc on mtc.muno=mu.muno
    order by mum.name asc
  </select> <!-- 완진 -->
  
  
  <select id="selectPrList" resultMap="musicianMap" parameterType="map">
  select pr.eno, pr.prno, mu.muno as mno, mu.nick, mu.path, mu.score, 
mu.major, mu.genre, mu.theme, fav.fav, null as location
from (select distinct eno from recruiting_eventlist where eno=#{eventNo} and mno=#{memberNo}) de
inner join pr on de.eno=pr.eno and pr.active='Y' and (pr.status='Y' or pr.status is null)
inner join musicians mu on pr.muno=mu.muno
left outer join (
  select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi
  where mno = #{memberNo}
  group by muno
) fav on fav.muno=mu.muno
  </select><!-- 완진 -->
  
  <select id="selectAppyList" resultMap="musicianMap" parameterType="map">
  select appy.eno, appy.appyno, mu.muno as mno, mu.nick, mu.path, mu.score,
mu.major, mu.genre, mu.theme, fav.fav, null as location
from (select distinct eno from recruiting_eventlist where eno=#{eventNo} and mno=#{memberNo}) de
inner join appy on de.eno=appy.eno and appy.active='Y' and (appy.status='Y' or appy.status is null)
inner join musicians mu on appy.muno=mu.muno
left outer join (
  select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi
  where mno = #{memberNo}
  group by muno
) fav on fav.muno=mu.muno
  </select><!-- 완진 -->
  
  <select id="myEventAppyList" resultMap="musicianAppyMap" parameterType="int">
  select eno, muno as muNoList from appy where eno = #{eNo} and active = 'Y'
  </select><!-- 승민 -->
  
  <select id="myEventPrList" resultMap="musicianAppyMap" parameterType="int">
  select eno, muno as muNoList from pr where eno = #{eNo} and active = 'Y'
  </select><!-- 승민 -->
  
   <select id="selectFavorList" resultMap="musicianFavorMap" parameterType="int">
   select ctr.count, m.mno, m.name, m.path, gnr.name as genre, mjr.name as major, loct.name as location
   from fav_musi fmu
   left outer join memb gm on fmu.mno=gm.mno
   left outer join musi mu on fmu.muno = mu.muno
   left outer join (select mno, count(*) as count 
   from fav_musi 
   group by mno) ctr on ctr.mno=fmu.mno
   left outer join memb m on m.mno = mu.muno
   left outer join gnr_musi gnmu on mu.muno = gnmu.muno
   left outer join gnr gnr on gnmu.gnrno = gnr.gnrno
   left outer join mjr_musi mjmu on mu.muno = mjmu.muno
   left outer join mjr mjr on mjmu.mjrno = mjr.mjrno
   left outer join loc_musi lomu on mu.muno = lomu.muno
   left outer join loc loc on lomu.locno = loc.locno
   left outer join loc_type loct on loc.loctno = loct.loctno
   where gm.mno = #{no}
  </select> <!-- 승민 -->
  
    <select id="favorMusiRemove" parameterType="map">
  delete from fav_musi where muno = #{muNo} and mno = #{myNo};
  </select> <!-- 승민 -->
  
  <select id="favorMusiAdd" parameterType="map">
  insert into fav_musi (muno, mno) values (#{muNo}, #{myNo})
  </select> <!-- 승민 -->
  
   <select id="surfList" resultMap="musicianMap">
  <include refid="selectAll" />
  </select> <!-- 승민 -->
  
  <select id="selectSurfListFilter" resultMap="musicianMap" parameterType="map">
  <include refid="selectAll" />
  <if test ='gender =="G"'>
  where mu.age <![CDATA[ > ]]>  #{minAge} and 
  mu.age  <![CDATA[ < ]]> #{maxAge}
  </if>
  <if test ='gender !="G"'>
  where mu.gender = #{gender} and 
  mu.age <![CDATA[ > ]]> #{minAge} and 
  mu.age <![CDATA[ < ]]> #{maxAge}
  </if>
  </select> <!-- 승민 -->
  
  <select id="musicianSearch" resultMap="musicianMap2" parameterType="map">
  select m.mno, m.name, mu.nick, m.phone, m.email, mu.age, mu.team,
  mu.hpg, m.path, mu.gender, mj.name as major, g.name as genre, t.name as
  theme, mtc.score, mtc.rev, if(fm.fav is not null, 1, 0) as fav,
  lm.muno, l.name as location, lt.name as sido , mjrt.name, gnrt.name
  from musi mu inner join memb m on mu.muno=m.mno
  left outer join mjr_musi mjm on mu.muno=mjm.muno
  left outer join mjr mj on mj.mjrno=mjm.mjrno
  left outer join gnr_musi gm on mu.muno=gm.muno 
  left outer join gnr g on gm.gnrno=g.gnrno
  left outer join thm_musi tm on mu.muno=tm.muno 
  left outer join thm t on tm.thmno=t.thmno
  left outer join mtc on mtc.muno=mu.muno
  left outer join (select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi where mno = #{no} group by muno) fm on fm.muno=mu.muno
  left outer join loc_musi lm on lm.muno=m.mno
  left outer join loc l on lm.locno= l.locno
  left outer join loc_type lt on l.loctno = lt.loctno
  left outer join mjr_type mjrt on mj.mjrtno=mjrt.mjrtno
  left outer join gnr_type gnrt on g.gnrtno=gnrt.gnrtno
    <choose>
      <when test="locno == 1000">
        where lt.loctno=#{indexL}
        <include refid="filter" />
        <choose>
          <when test="mjrno == 1000">
            AND mj.mjrtno=#{indexM}
            <if test="gnrno ==1000">
              AND g.gnrtno=#{indexG}
            </if>
            <if test="gnrno != 1000 and gnrno !=2000">
              AND g.gnrno=#{gnrno}
            </if>
          </when>
  
          <when test="mjrno== 2000">
            <if test="gnrno ==1000">
              AND g.gnrtno=#{indexG}
            </if>
            <if test="gnrno != 1000 and gnrno!=2000">
              AND g.gnrno=#{gnrno}
            </if>
          </when>
  
          <when test="mjrno != 1000 and mjrno !=2000">
            AND mj.mjrno=#{mjrno}
            <if test="gnrno ==1000">
              AND g.gnrtno=#{indexG}
            </if>
            <if test="gnrno != 1000 and gnrno!=2000">
              AND g.gnrno=#{gnrno}
            </if>
          </when>
        </choose>
      </when>
  
      <when test="locno == 2000">
        <choose>
          <when test="mjrno == 1000">
            where mj.mjrtno=#{indexM}
            <include refid="filter" />
            <if test="gnrno ==1000">
              AND g.gnrtno=#{indexG}
            </if>
            <if test="gnrno != 1000 and gnrno !=2000">
              AND g.gnrno=#{gnrno}
            </if>
          </when>
  
          <when test="mjrno== 2000">
            <if test="gnrno ==1000">
              where g.gnrtno=#{indexG}
              <include refid="filter" />
            </if>
            <if test="gnrno != 1000 and gnrno!=2000">
              where g.gnrno=#{gnrno}
              <include refid="filter" />
            </if>
          </when>
  
          <when test="mjrno != 1000 and mjrno !=2000">
            where mj.mjrno=#{mjrno}
            <include refid="filter" />
            <if test="gnrno ==1000">
              AND g.gnrtno=#{indexG}
            </if>
            <if test="gnrno != 1000 and gnrno!=2000">
              AND g.gnrno=#{gnrno}
            </if>
          </when>
        </choose>
      </when>
  
      <when test="locno != 1000 and locno != 2000 and locno !=3000">
        where l.locno=#{locno}
        <include refid="filter" />
        <choose>
          <when test="mjrno == 1000">
            AND mj.mjrtno=#{indexM}
            <if test="gnrno ==1000">
              AND g.gnrtno=#{indexG}
            </if>
            <if test="gnrno != 1000 and gnrno !=2000">
              AND g.gnrno=#{gnrno}
            </if>
          </when>
  
          <when test="mjrno== 2000">
            <if test="gnrno ==1000">
              AND g.gnrtno=#{indexG}
            </if>
            <if test="gnrno != 1000 and gnrno!=2000">
              AND g.gnrno=#{gnrno}
            </if>
          </when>
  
          <when test="mjrno != 1000 and mjrno !=2000">
            AND mj.mjrno=#{mjrno}
            <include refid="filter" />
            <if test="gnrno ==1000">
              AND g.gnrtno=#{indexG}
            </if>
            <if test="gnrno != 1000 and gnrno!=2000">
              AND g.gnrno=#{gnrno}
            </if>
          </when>
        </choose>
      </when>
  
      <otherwise>
        <if test='gender =="G"'>
          where mu.age <![CDATA[ > ]]>
          #{minAge} and
          mu.age  <![CDATA[ < ]]>
          #{maxAge}
        </if>
        <if test='gender !="G"'>
          where mu.gender = #{gender} and
          mu.age <![CDATA[ > ]]>
          #{minAge} and
          mu.age <![CDATA[ < ]]>
          #{maxAge}
        </if>
      </otherwise>
    </choose>
    order by mno asc
  </select>
  
  <select id="selectBestReviewList" resultMap="musicianMap">
    select mt.mtcno, mt.eno, mt.muno as mno, mt.score, mt.rev,
    mu.nick, mum.path, mj.name as major, g.name as genre, t.name as theme, null as location
    from musi mu inner join (
      select m.mtcno, m.eno, m.muno, m.score, m.rev
      from (
        select max(score) as score, muno,
        substring_index(group_concat(mtcno order by score desc), ',', 1) as mtcno
        from mtc
        group by muno
        order by score desc
      ) dmtc inner join mtc m on dmtc.mtcno=m.mtcno
      order by m.score desc
      limit 3
    ) mt on mt.muno=mu.muno
    inner join memb mum on mu.muno=mum.mno
    left outer join mjr_musi mjm on mu.muno=mjm.muno
    left outer join gnr_musi gm on mu.muno=gm.muno
    left outer join thm_musi tm on mu.muno=tm.muno
    inner join mjr mj on mjm.mjrno=mj.mjrno
    inner join gnr g on gm.gnrno=g.gnrno
    inner join thm t on tm.thmno=t.thmno
  </select><!-- 완진 -->
  
  <select id="selectPopularList" resultMap="musicianMap">
  select mum.mno, mu.nick, mum.path, sc.score, mj.name as major, g.name as genre, t.name as theme, null as location
  from musi mu
  inner join memb mum on mu.muno=mum.mno
  inner join (
    select count(if(muno is not null, 1, 0)) as popu, muno
    from fav_musi
    group by muno
    order by popu desc
    limit 4
  ) pomu on pomu.muno = mu.muno
  left outer join (
    select avg(score) as score, muno
    from mtc
    group by muno
  ) sc on sc.muno=mu.muno
  left outer join mjr_musi mjm on mu.muno=mjm.muno
  left outer join gnr_musi gm on mu.muno=gm.muno
  left outer join thm_musi tm on mu.muno=tm.muno
  inner join mjr mj on mjm.mjrno=mj.mjrno
  inner join gnr g on gm.gnrno=g.gnrno
  inner join thm t on tm.thmno=t.thmno
  order by mu.muno desc
  </select><!-- 완진 -->
  
  <insert id="insert" parameterType="musician" 
          useGeneratedKeys="true" keyColumn="mno" keyProperty="no">
    insert into musi(muno, team, age, hpg, intro, gender, nick) 
    values(#{no},#{isTeam},#{age},#{homepage},#{intro},#{gender},#{nickName})
  </insert>
   
  <update id="updateNick" parameterType="musician">
    update musi set 
      nick=#{nickName}
    where muno=#{no}
  </update>
  
  <select id="selectMusiNo" parameterType="int" resultMap="musicianInfoMap">
    SELECT * FROM musi 
    WHERE muno = #{no}
  </select>
  
  <delete id="delete" parameterType="int">
    delete from musi 
    where muno=#{no}
  </delete>
  
  <select id="selectMatchMusician" parameterType="map" resultMap="musicianMatchMap">
   select
   mu.muno, mu.nick, mm.path, fav.fav, score.score, mtc.rev,
  mj.name as major, g.name as genre, t.name as theme
from mtc mtc
left outer join musi mu on mtc.muno = mu.muno
left outer join memb mm on mu.muno = mm.mno
left outer join evn e on e.eno = mtc.eno 
left outer join mjr_musi mjm on mu.muno=mjm.muno inner join mjr mj on mjm.mjrno=mj.mjrno
left outer join gnr_musi gm on mu.muno=gm.muno inner join gnr g on gm.gnrno=g.gnrno
left outer join thm_musi tm on mu.muno=tm.muno inner join thm t on tm.thmno=t.thmno
left outer join (  select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi
  where mno = #{myNo}
  group by muno 
) fav on fav.muno =  mu.muno
left outer join (  select avg(score) as score, muno
  from mtc
  group by muno
) score on score.muno=mu.muno
where mtc.eno = #{eNo}
  </select>
  
  <select id="selectSearchResultList" resultMap="musicianMap2" parameterType="string">
   select m.mno, m.name, mu.nick, m.phone, m.email, mu.age, mu.team,
  mu.hpg, m.path, mu.gender, mj.name as major, g.name as genre, t.name as
  theme, mtc.score, mtc.rev, if(fm.fav is not null, 1, 0) as fav,
  lm.muno, l.name as location, lt.name as sido , mjrt.name, gnrt.name
  from musi mu inner join memb m on mu.muno=m.mno
  left outer join mjr_musi mjm on mu.muno=mjm.muno
  left outer join mjr mj on mj.mjrno=mjm.mjrno
  left outer join gnr_musi gm on mu.muno=gm.muno 
  left outer join gnr g on gm.gnrno=g.gnrno
  left outer join thm_musi tm on mu.muno=tm.muno 
  left outer join thm t on tm.thmno=t.thmno
  left outer join mtc on mtc.muno=mu.muno
  left outer join (select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi where mno = 1 group by muno) fm on fm.muno=mu.muno
  left outer join loc_musi lm on lm.muno=m.mno
  left outer join loc l on lm.locno= l.locno
  left outer join loc_type lt on l.loctno = lt.loctno
  left outer join mjr_type mjrt on mj.mjrtno=mjrt.mjrtno
  left outer join gnr_type gnrt on g.gnrtno=gnrt.gnrtno
  where mu.nick like '%${value}%' or
  lt.name like '%${value}%' or
  l.name like '%${value}%' or
  g.name like '%${value}%' or
  mj.name like '%${value}%'or
  t.name like '%${value}%'
  </select>
  
  
</mapper>












