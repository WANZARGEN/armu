<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bitcamp.java93.dao.MusicianDao">

  <resultMap type="musician" id="musicianMap">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="phone" property="phone" />
    <result column="pwd" property="password" />
    <result column="email" property="email" />
    <result column="age" property="age" />
    <result column="team" property="isTeam" />
    <result column="hpg" property="homepage" />
    <result column="intro" property="intro" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
    <result column="score" property="score" />
    <result column="rev" property="review" />
    <result column="popu" property="popularity"/>
    <result column="fav" property="isFavorite"/>
    <collection property="photoList" ofType="string">
      <result column="path"/>
    </collection>
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="themeList" ofType="string"> 
       <result column="theme"/> 
    </collection>
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>
  
   <resultMap type="musician" id="musicianInfoMap">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="age" property="age" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
  </resultMap>
  
  <resultMap type="musician" id="musicianInfoReviewMap">
    <id column="mno" property="no" />
    <result column="score" property="score" />
    <result column="rev" property="review" />
    <result column="count" property="count" />
    <result column="eventTitle" property="eventTitle" />
    <result column="eventDate" property="eventDate" />
  </resultMap>
  
  <resultMap type="musician" id="musicianInfoIntroduceMap">
    <result column="team" property="isTeam" />
    <result column="hpg" property="homepage" />
    <result column="intro" property="intro" />
    <collection property="majorList" ofType="string"> 
        <result column="major"/> 
    </collection>
    <collection property="genreList" ofType="string"> 
        <result column="genre"/> 
    </collection> 
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>
  
 <resultMap type="musician" id="musicianMapBasic">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="phone" property="phone" />
    <result column="pwd" property="password" />
    <result column="email" property="email" />
    <result column="age" property="age" />
    <result column="team" property="isTeam" />
    <result column="hpg" property="homepage" />
    <result column="intro" property="intro" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
    <result column="score" property="score" />
  </resultMap>
  
  <resultMap type="musician" id="musicianMapBasic2">
    <id column="mno" property="no" />
    <result column="name" property="name" />
    <result column="nick" property="nickName" />
    <result column="phone" property="phone" />
    <result column="pwd" property="password" />
    <result column="email" property="email" />
    <result column="age" property="age" />
    <result column="team" property="isTeam" />
    <result column="hpg" property="homepage" />
    <result column="intro" property="intro" />
    <result column="path" property="photo" />
    <result column="gender" property="gender" />
    <result column="score" property="score" />
    <collection property="locationList" ofType="string"> 
        <result column="location"/> 
    </collection>
  </resultMap>

 <sql id="selectBasic">
    select m.mno, m.name, m.nick, m.path, pwd, email,phone, gender
    from musi mu inner join memb m on mu.muno=m.mno
  </sql>

  <sql id="selectMajor">
    select m.mno, m.name, m.nick, gender, mu.path, mj.name as major
    from musi mu inner join memb m on mu.muno=m.mno
    left outer join mjr_musi mjm on mu.muno=mjm.muno left outer join mjr mj on
    mjm.mjrno=mj.mjrno
  </sql>
  
  <sql id="selectAll">
    select m.mno, m.name, m.nick, m.phone, m.email, mu.age, mu.team, mu.hpg, m.path, mu.gender, 
    mj.name as major, g.name as genre, t.name as theme, mtc.score, mtc.rev, fm.popu, null as fav, lm.muno, l.name as location
  from musi mu inner join memb m on mu.muno=m.mno
  left outer join mjr_musi mjm on mu.muno=mjm.muno left outer join mjr mj on mjm.mjrno=mj.mjrno
  left outer join gnr_musi gm on mu.muno=gm.muno left outer join gnr g on gm.gnrno=g.gnrno
  left outer join thm_musi tm on mu.muno=tm.muno left outer join thm t on tm.thmno=t.thmno
  left outer join mtc on mtc.muno=mu.muno
  left outer join (
  select count(if(muno is not null, 1, 0)) as popu, muno
  from fav_musi
  group by muno
  ) fm on fm.muno=mu.muno
  left outer join loc_musi lm on lm.muno=m.mno
  left outer join loc l on lm.locno= l.locno
  </sql>
  
  <sql id="selectAll_myFavorite">
    select m.mno, m.name, m.nick, m.phone, m.email, mu.age, mu.team, mu.hpg, m.path, mu.gender, 
    mj.name as major, g.name as genre, t.name as theme, mtc.score, mtc.rev, fm.fav, null as popu
  from musi mu inner join memb m on mu.muno=m.mno
  left outer join mjr_musi mjm on mu.muno=mjm.muno left outer join mjr mj on mjm.mjrno=mj.mjrno
  left outer join gnr_musi gm on mu.muno=gm.muno left outer join gnr g on gm.gnrno=g.gnrno
  left outer join thm_musi tm on mu.muno=tm.muno left outer join thm t on tm.thmno=t.thmno
  left outer join mtc on mtc.muno=mu.muno
  left outer join (
  select count(if(muno is not null, 1, 0)) as fav, muno, gno
  from fav_musi
  where gno=5
  group by muno
  ) fm
  on fm.muno=mu.muno
  </sql>

  <select id="selectOne" resultMap="musicianMapBasic">
    <include refid="selectBasic" />
    where m.mno=#{no}
  </select>
  
  <select id="selectMusi" resultMap="musicianInfoMap" parameterType="int">
  select m.mno, m.name, m.nick, mu.age, m.path, mu.gender
  from musi mu inner join memb m on mu.muno=m.mno
  where m.mno=#{no}
  </select>
  
  <select id="selectMusiReview" resultMap="musicianInfoReviewMap" parameterType="int">
  select mtc.rev, mtc.score, even.title as eventTitle, DATE_FORMAT(even.date, '%Y-%m-%d') as eventDate, m.name 
  from musi as mu left outer join mtc on mtc.muno=mu.muno
  left outer join evn as even on mtc.eno = even.eno
  left outer join gmemb as g on even.gno = g.gno
  left outer join memb as m on g.gno = m.mno
	where mtc.muno = #{no}
  </select>
  
  <select id="selectMusiReviewCount" resultMap="musicianInfoReviewMap" parameterType="int">
  select count(*) as count from mtc where muno = #{no} group by rev;
  </select>
  
  <select id="selectMusiIntroduce" resultMap="musicianInfoIntroduceMap" parameterType="int">
  select mu.team, mu.hpg, mu.intro, mj.name as major, g.name as genre, l.name as location 
  from musi mu left outer join mjr_musi mjm on mu.muno=mjm.muno 
  left outer join mjr mj on mjm.mjrno=mj.mjrno
  left outer join gnr_musi gm on mu.muno=gm.muno 
  left outer join gnr g on gm.gnrno=g.gnrno
  left outer join loc_musi lm on mu.muno=lm.muno 
  left outer join loc l on lm.locno=l.locno
  where mu.muno = #{no}
  </select>

  <select id="selectRecommandList" resultMap="musicianMap">
    <include refid="selectAll" />
    order by m.name asc
  </select>

  <!-- <select id="selectMajorList" resultMap="musicianMap" parameterType="int"> 
    <include refid="selectMajor"/> where mno = #{no} order by m.name asc </select> -->

  <select id="selectSurfList" resultMap="musicianMap">
  <include refid="selectAll" />
  </select>
  
  <select id="musicianLocation" resultMap="musicianMap">
  <include refid="selectAll" />
  where l.name like '동대문구'
  </select>
  
  
  <update id="updatePhoto" parameterType="map">
  update musi set 
  path=#{photoPath}
  where muno=#{musicianNo}
  </update>
  
   
</mapper>












