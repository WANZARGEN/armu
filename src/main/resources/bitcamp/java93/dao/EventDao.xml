<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bitcamp.java93.dao.EventDao">

  <resultMap type="event" id="eventMap">
    <id column="eno" property="no" />
    <result column="title" property="title" />
    <result column="mno" property="writer" />
    <result column="location" property="location" />
    <result column="addr" property="address" />
    <result column="pay" property="pay" />
    <result column="req" property="requirement" />
    <result column="cont" property="contents" />
    <result column="dpay" property="downPay" />
    <result column="date" property="date" />
    <result column="rpay" property="rhspay" />
    <result column="info" property="rhsinfo" />
    <result column="num" property="rhsnum" />
    <collection property="genreList" ofType="string">
      <result column="genre" />
    </collection>
    <collection property="themeList" ofType="string">
      <result column="theme" />
    </collection>
    <collection property="majorList" ofType="string">
      <result column="major" />
    </collection>
  </resultMap>

  <resultMap type="event" id="eventSelectMap">
    <id column="eno" property="no" />
    <result column="title" property="title" />
    <result column="loctname" property="city" />
    <result column="locname" property="location" />
    <result column="addr" property="address" />
    <result column="pay" property="pay" />
    <result column="date" property="date" />
    <result column="pr_count" property="pr_count" />
    <result column="mtc_info" property="mtc_info" />
  </resultMap>

  <resultMap type="event" id="eventMapBasic">
    <id column="eno" property="no" />
    <result column="title" property="title" />
    <result column="mno" property="writer" />
    <result column="location" property="location" />
    <result column="addr" property="address" />
    <result column="pay" property="pay" />
    <result column="req" property="requirement" />
    <result column="cont" property="contents" />
    <result column="dpay" property="downPay" />
    <result column="date" property="date" />
    <result column="rhspay" property="rhspay" />
    <result column="rhsinfo" property="rhsinfo" />
    <result column="rhsnum" property="rhsnum" />
    <result column="fav" property="isFavorite" />
    <result column="rhs" property="haveRehearsal" />
    <association property="writeMember" javaType="Member">
      <id property="no" column="muno" />
      <result property="name" column="name" />
      <result property="photo" column="path" />
    </association>
    <collection property="genreList" ofType="string">
      <result column="genre" />
    </collection>
    <collection property="themeList" ofType="string">
      <result column="theme" />
    </collection>
    <collection property="majorList" ofType="string">
      <result column="major" />
    </collection>
  </resultMap>


  <resultMap type="event" id="eventMapRecruit">
    <id column="eno" property="no" />
    <result column="mno" property="writer" />
    <result column="title" property="title" />
    <result column="date" property="date" />
    <result column="location" property="location" />
    <result column="addr" property="address" />
    <result column="pay" property="pay" />
    <collection property="appyList" ofType="Musician">
      <id column="ap_muno" property="no"/>
      <result column="ap_nick" property="nickName"/>
      <result column="ap_path" property="photo"/>
    </collection>
    <collection property="prList" ofType="Musician">
      <id column="p_muno" property="no"/>
      <result column="p_nick" property="nickName"/>
      <result column="p_path" property="photo"/>
    </collection>
    <collection property="genreList" ofType="string">
      <result column="genre" />
    </collection>
    <collection property="themeList" ofType="string">
      <result column="theme" />
    </collection>
    <collection property="majorList" ofType="string">
      <result column="major" />
    </collection>
  </resultMap>
  
  
  <resultMap type="event" id="matchEventMap">
    <id column="eno" property="no" />
    <result column="title" property="title" />
    <result column="mno" property="writer" />
    <result column="location" property="location" />
    <result column="addr" property="address" />
    <result column="pay" property="pay" />
    <result column="req" property="requirement" />
    <result column="cont" property="contents" />
    <result column="dpay" property="downPay" />
    <result column="date" property="date" />
    <result column="rpay" property="rhspay" />
    <result column="info" property="rhsinfo" />
    <result column="num" property="rhsnum" />
     <association property="matchMusician" javaType="Musician">
      <id property="no" column="muno" />
      <result property="nickName" column="nick" />
      <result property="photo" column="path" />
      <result property="isFavorite" column="fav" />
      <result property="score" column="score" />
    <collection property="genreList" ofType="string">
      <result column="genre" />
    </collection>
    <collection property="themeList" ofType="string">
      <result column="theme" />
    </collection>
    <collection property="majorList" ofType="string">
      <result column="major" />
    </collection>
    </association>
  </resultMap>
  
  
   <select id="selectEndList" resultMap="matchEventMap"
    parameterType="int">
    select e.eno, e.mno, e.title, e.date, concat(lt.name, ' ', l.name) as location, e.addr, e.pay,
mu.muno, mu.nick, mm.path, fav.fav,
mj.name as major, g.name as genre, t.name as theme
from evn e
inner join memb m on e.mno=m.mno
inner join mtc on e.eno=mtc.eno and e.mno=#{no}
inner join loc l on e.locno=l.locno inner join loc_type lt on l.loctno=lt.loctno
inner join musi mu on mtc.muno=mu.muno inner join memb mm on mu.muno=mm.mno
left outer join mjr_musi mjm on mu.muno=mjm.muno inner join mjr mj on mjm.mjrno=mj.mjrno
left outer join gnr_musi gm on mu.muno=gm.muno inner join gnr g on gm.gnrno=g.gnrno
left outer join thm_musi tm on mu.muno=tm.muno inner join thm t on tm.thmno=t.thmno
left outer join (
  select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi
  where mno = #{no}
  group by muno
) fav on fav.muno=mu.muno
where date &lt; curdate() order by date asc
  </select><!-- 완진 -->
  
  
  <select id="selectOngoingList" resultMap="matchEventMap"
    parameterType="int">
    select e.eno, e.mno, e.title, e.date, concat(lt.name, ' ', l.name) as location, e.addr, e.pay,
mu.muno, mu.nick, mm.path, fav.fav, score.score,
mj.name as major, g.name as genre, t.name as theme
from evn e inner join mtc on e.eno=mtc.eno and e.date >= curdate() and e.mno=#{no}
inner join loc l on e.locno=l.locno inner join loc_type lt on l.loctno=lt.loctno
inner join musi mu on mtc.muno=mu.muno inner join memb mm on mu.muno=mm.mno
left outer join mjr_musi mjm on mu.muno=mjm.muno inner join mjr mj on mjm.mjrno=mj.mjrno
left outer join gnr_musi gm on mu.muno=gm.muno inner join gnr g on gm.gnrno=g.gnrno
left outer join thm_musi tm on mu.muno=tm.muno inner join thm t on tm.thmno=t.thmno
left outer join (
  select count(if(mno is not null, 1, 0)) as fav, mno, muno
  from fav_musi
  where mno = #{no}
  group by muno
) fav on fav.muno=mu.muno
left outer join (
  select avg(score) as score, muno
  from mtc
  group by muno
) score on score.muno=mu.muno
  </select><!-- 완진 -->

  <select id="selectRecruitingList" resultMap="eventMapRecruit" parameterType="int">
  select ap.eno, ap.mno, ap.title, ap.date, ap.location, ap.addr, ap.pay, 
  ap.major, ap.genre, ap.theme,
ap.appyno, ap.muno as ap_muno, ap.nick as ap_nick, ap.path as ap_path,
 p.prno, p.muno as p_muno, p.nick as p_nick, p.path as p_path
from eventlist_appy_musicians ap
left outer join eventlist_pr_musicians p on ap.eno = p.eno
where ap.mno=#{no}
  </select><!-- 완진 -->


  <select id="selectRecommandList" resultMap="eventMapBasic"
    parameterType="int">
    select e.title, e.eno, e.date, concat(lt.name, ' ', l.name) as location,
    e.addr, e.pay,
    mj.name as major, g.name as genre, t.name as theme,
    fe.fav, m.mno, m.name, m.path
    from (select * from evn where date >= curdate() and eno not in (select eno
    from mtc) order by date asc) e
    left outer join (
    select count(if(muno is not null, 1, 0)) as fav, muno, eno
    from fav_evn where muno=#{no} group by eno
    ) fe on fe.eno=e.eno
    inner join memb m on e.mno=m.mno
    inner join loc l on e.locno=l.locno inner join loc_type lt on
    l.loctno=lt.loctno
    left outer join mjr_evn me on e.eno=me.eno inner join mjr mj on
    me.mjrno=mj.mjrno
    left outer join gnr_evn ge on e.eno=ge.eno inner join gnr g on
    ge.gnrno=g.gnrno
    left outer join thm_evn te on e.eno=te.eno inner join thm t on
    te.thmno=t.thmno
    left outer join mjr_musi mjm on mj.mjrno=mjm.mjrno
    left outer join gnr_musi gm on g.gnrno=gm.gnrno
    left outer join thm_musi tm on t.thmno=tm.thmno
    where (mjm.muno=#{no} or gm.muno=#{no} or tm.muno=#{no})
  </select><!-- 완진 -->

  <select id="selectRecentList" resultMap="eventMapBasic"
    parameterType="int">
    select e.title, e.eno, e.date, concat(lt.name, ' ', l.name) as location,
    e.addr, e.pay,
    mj.name as major, g.name as genre, t.name as theme,
    fe.fav, m.mno, m.name, m.path
    from (select * from evn where date >= curdate() and eno not in (select eno
    from mtc) order by date desc limit 3) e
    inner join memb m on e.mno=m.mno
    inner join loc l on e.locno=l.locno inner join loc_type lt on
    l.loctno=lt.loctno
    left outer join mjr_evn me on e.eno=me.eno
    left outer join gnr_evn ge on e.eno=ge.eno
    left outer join thm_evn te on e.eno=te.eno
    inner join mjr mj on me.mjrno=mj.mjrno
    inner join gnr g on ge.gnrno=g.gnrno
    inner join thm t on te.thmno=t.thmno
    left outer join (
    select count(if(muno is not null, 1, 0)) as fav, muno, eno
    from fav_evn
    where muno=#{no}
    group by eno
    ) fe on fe.eno=e.eno
  </select><!-- 완진 -->

  <insert id="insert" parameterType="event" useGeneratedKeys="true"
    keyColumn="eno" keyProperty="no">
    insert into evn(eno, mno, locno, pay, req, cont, addr, date, title)
    values(#{no}, #{writer}, #{locno}, #{pay}, #{requirement},
    #{contents}, #{address}, #{date}, #{title})
  </insert><!-- 승민 -->

  <insert id="insertTheme" parameterType="map">
    insert into thm_evn(eno, thmno)
    values(#{eventNo}, #{eventTheme})
  </insert><!-- 승민 -->

  <insert id="insertMajor" parameterType="map">
    insert into mjr_evn(eno, mjrno)
    values(#{eventNo}, #{eventMajor})
  </insert><!-- 승민 -->

  <insert id="insertGenre" parameterType="map">
    insert into gnr_evn(eno, gnrno)
    values(#{eventNo}, #{eventGenre})
  </insert><!-- 승민 -->

  <insert id="insertReherse" parameterType="event">
    insert into rhs(eno, pay, info, num)
    values(#{no}, #{rhspay}, #{rhsinfo}, #{rhsnum})
  </insert><!-- 승민 -->

  <select id="selectEventList" resultMap="eventSelectMap"
    parameterType="map">
    select even.eno, even.pay, even.date, even.title,
    loct.name as loctname, loc.name as locname, even.addr, if(prc.prno is
    not null, 1, 0) as pr_count, if(mtc.mtcno is not null, 1, 0) as
    mtc_info
    from evn even
    left outer join loc loc on even.locno = loc.locno
    left outer join loc_type loct on loc.loctno = loct.loctno
    left outer join
    (select prno, muno, eno
    from pr
    group by muno, eno
    having muno = #{muNo}
    ) prc on even.eno = prc.eno
    left outer join mtc mtc on even.eno = mtc.eno
    where even.mno = #{myNo}
  </select><!-- 승민 -->

  <insert id="eventRequest" parameterType="map" useGeneratedKeys="true"
    keyColumn="prno" keyProperty="prno">
    insert into pr(muno, eno)
    values(#{muNo}, #{eNo});
  </insert> <!-- 승민 -->

  <select id="selectFavorList" resultMap="eventMapBasic" parameterType="int">
    select e.eno, e.pay, e.addr, e.date, e.title, concat(lt.name, ' ', l.name) as location,
    m.mno, m.name, m.path, mj.name as major, g.name as genre, t.name as theme
    from fav_evn fe
    left outer join evn e on fe.eno = e.eno
    left outer join memb m on e.mno = m.mno
    inner join loc l on e.locno=l.locno inner join loc_type lt on
    l.loctno=lt.loctno
    left outer join mjr_evn me on e.eno=me.eno inner join mjr mj on
    me.mjrno=mj.mjrno
    left outer join gnr_evn ge on e.eno=ge.eno inner join gnr g on
    ge.gnrno=g.gnrno
    left outer join thm_evn te on e.eno=te.eno inner join thm t on
    te.thmno=t.thmno
    where muno = #{no}
  </select> <!-- 승민 -->

  <select id="favorEventRemove" parameterType="map">
    delete from fav_evn where muno = #{myNo} and eno = #{eNo};
  </select> <!-- 승민 -->

  <select id="favorEventAdd" parameterType="map">
    insert into fav_evn (muno, eno) values (#{myNo}, #{eNo})
  </select> <!-- 승민 -->

  <select id="selectSurfList" resultMap="eventMapBasic"
    parameterType="int">
    select e.eno, e.locno, e.pay, e.addr, e.date, e.title, fe.fav,
    concat(lt.name, ' ', l.name) as location,
    m.mno, m.name, m.path, mj.name as major, g.name as genre, t.name as theme
    from (select * from evn where date >= curdate() and eno not in (select
    eno from mtc)) e
    left outer join memb m on e.mno = m.mno
    left outer join (
    select count(if(muno is not null, 1, 0)) as fav, muno, eno
    from fav_evn where muno=#{no} group by eno
    ) fe on fe.eno=e.eno
    inner join loc l on e.locno=l.locno inner join loc_type lt on
    l.loctno=lt.loctno
    left outer join mjr_evn me on e.eno=me.eno inner join mjr mj on
    me.mjrno=mj.mjrno
    left outer join gnr_evn ge on e.eno=ge.eno inner join gnr g on
    ge.gnrno=g.gnrno
    left outer join thm_evn te on e.eno=te.eno inner join thm t on
    te.thmno=t.thmno
    order by eno
  </select>

  <select id="selectSearchResultList" resultMap="eventMapBasic" parameterType="string">
    select e.title, e.eno, e.date, concat(lt.name, ' ', l.name) as location,
    e.addr, e.pay,
    mj.name as major, g.name as genre, t.name as theme,
    m.mno, m.name, m.path
    from (select * from evn where date >= curdate() and eno not in (select eno
    from mtc) order by date asc) e
    inner join memb m on e.mno=m.mno
    inner join loc l on e.locno=l.locno inner join loc_type lt on
    l.loctno=lt.loctno
    left outer join mjr_evn me on e.eno=me.eno inner join mjr mj on
    me.mjrno=mj.mjrno
    left outer join gnr_evn ge on e.eno=ge.eno inner join gnr g on
    ge.gnrno=g.gnrno
    left outer join thm_evn te on e.eno=te.eno inner join thm t on
    te.thmno=t.thmno
    left outer join mjr_musi mjm on mj.mjrno=mjm.mjrno
    left outer join gnr_musi gm on g.gnrno=gm.gnrno
    left outer join thm_musi tm on t.thmno=tm.thmno
    where l.name like '%${value}%' or
    g.name like '%${value}%' or
    mj.name like '%${value}%'or
    t.name like '%${value}%'
  </select>
  
  <select id="selectEvent" resultMap="eventMapBasic" parameterType="map">
    select e.eno, e.title, e.mno,  e.addr, e.pay, e.req, e.cont, e.dpay, e.date,
           concat(lt.name, ' ', l.name) as location, if(fav.eno is not null, 1, 0) as fav,
           if(rhs.eno is not null, 1, 0) as rhs, rhs.pay as rhspay, rhs.info as rhsinfo, rhs.num as rhsnum,
           memb.mno as muno, memb.name, memb.path, 
           t.name as theme, m.name as major, g.name as genre
    from evn e
    left outer join 
    (select eno, muno 
    from fav_evn
    where muno = #{muNo}
    ) fav on fav.eno = e.eno
    left outer join loc l on e.locno = l.locno
    left outer join loc_type lt on l.loctno = lt.loctno
    left outer join rhs rhs on e.eno = rhs.eno
    left outer join thm_evn te on e.eno = te.eno
    left outer join thm t on te.thmno = t.thmno
    left outer join mjr_evn me on e.eno = me.eno
    left outer join mjr m on me.mjrno = m.mjrno
    left outer join gnr_evn ge on e.eno = ge.eno
    left outer join gnr g on ge.gnrno = g.gnrno
    left outer join memb memb on e.mno = memb.mno
    where e.eno = #{eNo};
  </select> <!-- 승민 -->

  <select id="eventSearch" resultMap="eventMap" parameterType="map">
    select e.eno, e.locno, e.pay, e.addr, e.date, e.title, fe.fav,
    concat(lt.name, ' ', l.name) as location,
    m.mno, m.name, m.path, mj.name as major, g.name as genre, t.name as theme
    from (select * from evn where date >= curdate() and eno not in (select
    eno from mtc)) e
    left outer join memb m on e.mno = m.mno
    left outer join (
    select count(if(muno is not null, 1, 0)) as fav, muno, eno
    from fav_evn where muno=#{no} group by eno
    ) fe on fe.eno=e.eno
    inner join loc l on e.locno=l.locno inner join loc_type lt on
    l.loctno=lt.loctno
    left outer join mjr_evn me on e.eno=me.eno inner join mjr mj on
    me.mjrno=mj.mjrno
    left outer join gnr_evn ge on e.eno=ge.eno inner join gnr g on
    ge.gnrno=g.gnrno
    left outer join thm_evn te on e.eno=te.eno inner join thm t on
    te.thmno=t.thmno
    left outer join gnr_type gnrt on g.gnrtno=gnrt.gnrtno
    left outer join mjr_type mjrt on mj.mjrtno=mjrt.mjrtno
    left outer join thm_type thmt on t.thmtno=thmt.thmtno
    <choose>
      <when test="mjrno == 1000">
        where mj.mjrtno=#{indexM}
        <choose>
          <when test="gnrno == 1000">
            AND g.gnrtno=#{indexG}
            <if test="thmno ==1000">
              AND t.thmtno=#{indexT}
            </if>
            <if test="thmno != 1000 and thmno !=2000">
              AND t.thmno=#{thmno}
            </if>
          </when>
  
          <when test="gnrno== 2000">
            <if test="thmno ==1000">
              AND t.thmtno=#{indexT}
            </if>
            <if test="thmno != 1000 and thmno!=2000">
              AND t.thmno=#{thmno}
            </if>
          </when>
  
          <when test="gnrno != 1000 and gnrno !=2000">
            AND g.gnrno=#{gnrno}
            <if test="thmno ==1000">
              AND t.thmtno=#{indexT}
            </if>
            <if test="thmno != 1000 and thmno!=2000">
              AND t.thmno=#{thmno}
            </if>
          </when>
        </choose>
      </when>
  
      <when test="mjrno == 2000">
        <choose>
          <when test="gnrno == 1000">
            where g.gnrtno=#{indexG}
            <if test="thmno ==1000">
              AND t.thmtno=#{indexT}
            </if>
            <if test="thmno != 1000 and thmno!=2000">
              AND t.thmno=#{thmno}
            </if>
          </when>
  
          <when test="gnrno== 2000">
            <if test="thmno ==1000">
              where t.thmtno=#{indexT}
            </if>
            <if test="thmno != 1000 and thmno!=2000">
              where t.thmno=#{thmno}
            </if>
          </when>
  
          <when test="gnrno != 1000 and gnrno !=2000">
            where g.gnrno=#{gnrno}
            <if test="thmno==1000">
              AND t.thmtno=#{indexT}
            </if>
            <if test="thmno != 1000 and thmno!=2000">
              AND t.thmno=#{thmno}
            </if>
          </when>
        </choose>
      </when>
  
      <when test="mjrno != 1000 and mjrno != 2000 and mjrno !=3000">
        where mj.mjrno=#{mjrno}
        <choose>
          <when test="gnrno == 1000">
            AND g.gnrtno=#{indexG}
            <if test="thmno ==1000">
              AND t.thmtno=#{indexT}
            </if>
            <if test="thmno != 1000 and thmno !=2000">
              AND t.thmno=#{thmno}
            </if>
          </when>
  
          <when test="gnrno == 2000">
            <if test="thmno ==1000">
              AND t.thmtno=#{indexT}
            </if>
            <if test="thmno != 1000 and thmno !=2000">
              AND t.thmno=#{thmno}
            </if>
          </when>
  
          <when test="gnrno != 1000 and gnrno !=2000">
            AND g.gnrno=#{gnrno}
            <if test="thmno==1000">
              AND t.thmtno=#{indexT}
            </if>
            <if test="thmno!= 1000 and thmno!=2000">
              AND t.thmno=#{thmno}
            </if>
          </when>
        </choose>
      </when>
  
      <otherwise></otherwise>
    </choose>
  </select>

</mapper>












